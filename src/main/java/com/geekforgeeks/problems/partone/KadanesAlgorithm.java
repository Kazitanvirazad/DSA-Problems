package com.geekforgeeks.problems.partone;

/**
 * Given an integer array arr[]. Find the contiguous sub-array(containing at least one number) that has the
 * maximum sum and return its sum.
 *
 * Examples:
 *
 * Input: arr[] = [1, 2, 3, -2, 5]
 * Output: 9
 * Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.
 * Input: arr[] = [-1, -2, -3, -4]
 * Output: -1
 * Explanation: Max subarray sum is -1 of element (-1)
 * Input: arr[] = [5, 4, 7]
 * Output: 16
 * Explanation: Max subarray sum is 16 of element (5, 4, 7)
 * Expected Time Complexity: O(n)
 * Expected Auxiliary Space: O(1)
 */
public class KadanesAlgorithm {
    public static void main(String[] args) {
        int arr[] = {-93311, -86477, -95268, -88683, -78724, -92411, -71845, -74378, -89857, -93367, -83348, -70412, -84040, -73278, -69553, -74855, -74213, -86551, -95441, -76485, -83535, -78867, -98291, -72157, -89165, -68103, -94470, -81297, -73001, -69963, -70775, -90955, -84118, -86769, -79484, -77847, -70241, -68293, -89634, -73599, -71129, -97544, -80919, -91946, -72447, -87786, -96567, -80690, -80236, -95691, -86231, -77640, -75013, -78129, -74452, -77961, -77920, -99207, -92506, -87069, -86260, -77211, -81523, -95892, -78083, -78036, -89430, -92159, -72519, -80950, -84844, -73936, -85085, -92182, -70945, -80754, -95732, -89243, -84591, -77479, -98229, -81659, -75563, -99492, -86512, -98674, -70412, -68333, -79371, -94721, -91520, -79600, -71850, -74731, -71981, -80739, -80285, -69615, -88904, -68189, -71053, -67397, -74393, -81974, -71012, -87385, -80457, -78622, -85888, -76873, -93297, -74622, -91799, -79903, -79971, -84242, -86631, -95438, -82101, -80066, -73253, -74477, -89361, -89923, -92322, -96052, -97214, -68720, -78397, -90298, -81644, -84840, -83083, -98795, -98754, -99175, -81863, -79947, -78121, -73061, -72186, -85740, -74837, -76400, -72682, -79791, -90392, -83656, -75715, -91964, -96229, -79294, -87430, -77762, -91045, -94796, -78132, -79470, -71996, -77940, -75450, -90028, -78552, -68441, -92058, -85536, -90880, -89117, -87645, -86114, -72535, -95615, -82875, -88443, -70451, -81971, -67975, -90146, -72161, -95232, -85851, -82101, -90293, -92571, -99591, -97785, -75988, -82245, -89785, -97425, -98496, -88613, -89836, -70974, -97702, -87654, -80401, -72155, -72809, -75791, -73727, -76054, -79469, -90789, -79642, -93423, -79395, -85377, -87365, -73713, -96088, -94961, -82568, -95537, -98109, -75792, -70016, -81673, -96309, -84325, -88457, -94356, -73057, -75837, -89772, -87528, -98796, -91336, -95049, -73493, -90134, -78069, -73604, -72161, -89089, -79885, -88688, -79423, -91709, -75537, -90365, -78227, -76308, -70099, -95905, -99495, -78741, -78037, -72647, -94316, -80226, -78820, -99835, -83312, -79417, -75123, -91601, -82465, -81475, -72376, -83609, -74694, -80927, -76936, -70596, -83513, -98732, -95473, -69652, -93796, -88217, -69019, -84614, -72577, -97965, -84703, -89342, -97041, -80341, -77731, -98486, -88983, -94194, -87547, -83047, -80412, -93791, -84096, -94260, -83554, -85316, -67693, -90970, -96742, -72348, -81022, -96152, -73111, -80134, -83080, -79455, -88662, -73295, -77272, -93112, -77875, -89530, -83019, -90872, -94308, -76309, -80945, -88357, -71173, -80764, -78048, -94502, -72082, -83179, -95258, -79276, -72483, -91525, -92703, -95459, -98156, -82341, -93841, -98776, -88946, -77735, -97802, -75688, -84749, -74870, -73854, -88684, -69153, -84949, -86097, -94694, -67739, -96365, -88630, -96747, -98604, -87962, -94669, -91279, -80584, -70900, -95995, -76306, -83164, -88479, -75783, -74381, -73297, -86866, -81016, -75098, -67395, -77607, -74928, -80455, -73088, -78888, -92743, -92282, -73666, -92565, -93480, -93985, -95148, -95477, -96620, -95201, -84613, -72675, -94713, -94971, -98486, -71060, -68569, -97597, -70660, -71722, -87643, -69551, -85132, -85434, -68587, -69881, -95362, -72990, -92080, -82069, -80552, -94843, -97258, -74680, -72591, -95121, -83208, -80896, -93584, -84933, -95627, -70622, -93064, -97262, -79516, -93377, -88662, -88545, -88430, -72454, -75028, -76734, -79189, -88993, -68631, -68343, -77474, -77706, -82599, -97060, -74308, -67817, -71549, -90249, -78367, -87553, -99328, -82530, -77353, -79324, -81471, -99573, -71241, -90810, -76204, -67412, -94447, -73273, -82590, -86261, -94834, -76612, -90243, -80626, -78124, -74172, -92904, -82208, -90710, -75751, -89385, -91857, -88995, -89500, -79094, -88936, -87454, -99626, -75660, -84641, -76484, -79372, -80304, -99484, -69471, -75086, -71274, -92590, -97832, -85948, -82054, -83430, -87451, -70095, -96971, -67680, -90648, -96599, -99063, -98893, -86205, -89320, -97153, -72125, -83717, -99589, -73740, -72754, -72479, -94989, -73901, -72932, -92431, -70121, -81884, -68308, -98438, -89201, -69434, -92818, -92033, -83361, -91912, -90061, -93603, -93824, -95329, -94879, -68689, -95691, -96829, -81045, -69521, -93540, -74022, -92544, -82850, -82301, -94647, -79869, -74587, -73090, -87512, -91588, -82756, -72394, -81083, -78771, -95605, -83196, -81300, -93593, -90673, -81985, -87322, -74179, -69952, -73006, -72128, -95303, -73743, -75375, -98994, -80402, -73865, -78899, -73106, -83889, -89267, -86363, -85743, -73698, -97033, -81504, -96648, -93657, -81818, -73223, -75844, -96083, -91620, -88006, -71407, -94811, -85872, -97268, -79285, -92894, -99116, -79282, -99166, -74735, -80267, -71324, -88654, -73946, -94557, -84014, -68666, -82410, -84335, -93943, -92331, -73977, -72417, -84864, -68147, -72124, -69705, -91385, -99952, -76234, -79244, -84391, -89284, -70768, -81014, -78096, -81872, -95799, -94750, -68579, -71092, -78897, -73980, -85417, -84745, -94982, -89030, -97324, -87193, -98754, -93454, -86186, -97251, -91226, -92059, -95928, -86610, -92675, -70538, -79095, -91959, -97074, -78883, -68472, -72842, -68464, -90748, -70639, -79460, -88806, -96463, -77722, -98618, -95139, -84634, -85742, -76506, -69295, -75130, -89862};
        System.out.println("Max sum = " + maxSubarraySum(arr));
    }

    public static int maxSubarraySum(int[] arr) {
        int temp = 0;
        int finalAnswer = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            if (temp < 0) {
                temp = arr[i];
            } else {
                temp += arr[i];
            }
            if (temp > finalAnswer) {
                finalAnswer = temp;
            }
        }
        return finalAnswer;
    }
}

/**
 * Explanation:
 * A simple idea of Kadaneâ€™s algorithm is to look for all positive contiguous segments of the array and keep
 * track of the maximum sum contiguous subarray among all positive segments.
 *
 * First, we will consider two elements, one which stores the maximum end of the subarray and another which
 * stores the maximum sum so far.
 *
 * Let these two variables be temp and final_ans, respectively.
 *
 * We will initialise temp to 0 and final_ans to INT_MIN.
 *
 * Each time we get a positive sum, we compare it with final_ans and update final_ans if it is greater than it.
 *
 * This logic is written in the form of an algorithm as follows:
 *
 * 1) Start
 *
 * 2) final_ans = INT_MIN
 *
 * 3) temp = 0
 *
 * 4) Loop for each element of the array
 *
 *      1) if(temp < 0)
 *           1) temp =  arr[i]
 *
 *      2) else temp = temp + arr[i]
 *
 *      3) if(final_ans < temp)
 *            1) final_ans = temp
 *
 * 5) return final_ans
 */