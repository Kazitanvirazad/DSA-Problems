package com.geekforgeeks.problems.partone;

import java.util.LinkedList;
import java.util.List;

/**
 * Given two arrays arr1 and arr2 of size N and M respectively and an element K.
 * The task is to find the element that would be at the kth position of the
 * final sorted array.
 * 
 * 
 * Example 1:
 * 
 * Input: arr1[] = {2, 3, 6, 7, 9} arr2[] = {1, 4, 8, 10} k = 5 Output: 6
 * Explanation: The final sorted array would be - 1, 2, 3, 4, 6, 7, 8, 9, 10 The
 * 5th element of this array is 6. Example 2: Input: arr1[] = {100, 112, 256,
 * 349, 770} arr2[] = {72, 86, 113, 119, 265, 445, 892} k = 7 Output: 256
 * Explanation: Final sorted array is - 72, 86, 100, 112, 113, 119, 256, 265,
 * 349, 445, 770, 892 7th element of this array is 256.
 * 
 * Your Task: You don't need to read input or print anything. Your task is to
 * complete the function kthElement() which takes the arrays arr1[], arr2[], its
 * size N and M respectively and an integer K as inputs and returns the element
 * at the Kth position.
 * 
 * 
 * Expected Time Complexity: O(Log(N) + Log(M)) Expected Auxiliary Space: O(Log
 * (N))
 * 
 * 
 * Constraints: 1 <= N, M <= 106 0 <= arr1i, arr2i < INT_MAX 1 <= K <= N+M
 *
 */
public class KthElementOfTwoArrays {

	public static long kthElement(int arr1[], int arr2[], int n, int m, int k) {

		int indexA = 0, indexB = 0;

		List<Integer> unionArr = new LinkedList<>();

		while (indexA < n || indexB < m) {
			if (indexA < n) {
				unionArr.add(arr1[indexA]);
				indexA++;
			}
			if (indexB < m) {
				unionArr.add(arr2[indexB]);
				indexB++;
			}
		}
		unionArr.sort((o1, o2) -> {
			if (o1 > o2)
				return 1;
			else if (o1.equals(o2))
				return 0;
			else
				return -1;
		});

		return unionArr.get(k - 1);

	}

	public static int kthElement(int[] a, int[] b, int k) {
		int[] mergedArray = merge(a, b);
		return mergedArray[k - 1];
	}

	private static int[] merge(int[] a, int[] b) {
		int[] mergedArray = new int[a.length + b.length];
		int tempIndex = 0;
		int i = 0, j = 0;
		while (i < a.length && j < b.length) {
			mergedArray[tempIndex++] = a[i] <= b[j] ? a[i++] : b[j++];
		}
		while (true) {
			if (i < a.length) {
				mergedArray[tempIndex++] = a[i++];
			} else if (j < b.length) {
				mergedArray[tempIndex++] = b[j++];
			} else {
				break;
			}
		}
		return mergedArray;
	}

	public static void main(String[] args) {
//		int arr1[] = { 2, 3, 6, 7, 9 };
//		int arr2[] = { 1, 4, 8, 10 };
//		int k = 5;
//		int arr1[] = { 100, 112, 256, 349, 770 };
//		int arr2[] = { 72, 86, 113, 119, 265, 445, 892 };
//		int k = 7;
		int k = 344;
		int arr1[] = { 44, 47, 48, 50, 53, 56, 59, 61, 64, 65, 65, 70, 72, 75, 77, 78, 88, 91, 91, 99, 99, 104, 105,
				106, 108, 109, 113, 115, 118, 120, 123, 124, 125, 126, 128, 129, 132, 133, 134, 136, 139, 141, 146, 150,
				155, 156, 157, 158, 160, 160, 161, 161, 165, 166, 167, 168, 175, 180, 180, 184, 186, 187, 190, 193, 195,
				200, 203, 204, 206, 206, 210, 212, 212, 213, 214, 214, 214, 216, 220, 220, 222, 228, 228, 230, 231, 235,
				235, 242, 242, 247, 251, 254, 256, 257, 259, 261, 263, 263, 264, 266, 266, 267, 270, 270, 273, 273, 276,
				279, 281, 283, 283, 284, 285, 296, 301, 302, 302, 302, 302, 304, 305, 306, 312, 313, 313, 313, 314, 315,
				323, 323, 330, 331, 333, 335, 336, 338, 341, 344, 346, 350, 352, 353, 353, 354, 356, 359, 361, 362, 368,
				368, 372, 372, 379, 383, 386, 387, 388, 388, 389, 390, 397, 400, 402, 403, 410, 415, 418, 418, 419, 429,
				429, 431, 434, 435, 435, 436, 438, 440, 440, 440, 442, 443, 445, 445, 447, 449, 451, 451, 451, 451, 452,
				453, 454, 454, 456, 458, 460, 462, 469, 472, 472, 474, 479, 480, 484, 485, 492, 493, 493, 495, 497, 500,
				503, 506, 510, 511, 514, 515, 515, 516, 517, 518, 518, 523, 527, 529, 533, 534, 534, 535, 536, 537, 539,
				541, 542, 542, 543, 543, 544, 548, 550, 557, 557, 558, 564, 566, 569, 575, 585, 585, 588, 590, 595, 595,
				596, 597, 599, 602, 604, 605, 606, 609, 609, 611, 616, 616, 617, 618, 620, 621, 622, 622, 626, 627, 635,
				639, 642, 644, 645, 646, 650, 651, 652, 652, 655, 657, 660, 661, 661, 665, 669, 669, 671, 671, 672, 676,
				677, 677, 678, 684, 685, 692, 696, 697, 699, 701, 702, 705, 708, 711, 711, 721, 722, 723, 726, 726, 727,
				733, 735, 735, 735, 738, 739, 745, 748, 749, 754, 754, 755, 756, 758, 758, 758, 760, 761, 764, 765, 771,
				771, 772, 773, 777, 780, 781, 781, 786, 792, 797, 798, 801, 804, 805, 805, 808, 808, 811, 814, 815, 815,
				818, 821, 829, 836, 836, 838, 840, 842, 844, 845, 845, 846, 847, 850, 851, 851, 858, 858, 864, 864, 868,
				876, 876, 877, 881, 885, 885, 886, 888, 893, 894, 895, 896, 896, 898, 898, 900, 902, 909, 910, 912, 915,
				916, 920, 924, 925, 926, 931, 932, 933, 934, 935, 939, 940, 940, 942, 945, 949, 959, 960, 975, 979, 980,
				981, 985, 986, 988, 989, 991, 992, 993, 993, 995, 996, 997, 998, 1002, 1003, 1008, 1011, 1020, 1021,
				1022, 1024, 1025, 1026, 1035 };
		int arr2[] = { 40, 43, 47, 54, 54, 55, 55, 57, 57, 58, 60, 66, 67, 68, 68, 69, 72, 74, 78, 80, 81, 83, 83, 83,
				85, 85, 88, 89, 93, 93, 94, 94, 94, 94, 97, 98, 98, 101, 101, 101, 104, 104, 105, 106, 106, 107, 107,
				113, 113, 116, 121, 122, 126, 128, 128, 131, 131, 132, 132, 135, 135, 136, 136, 137, 137, 139, 142, 144,
				147, 151, 152, 153, 153, 154, 155, 155, 155, 158, 158, 159, 162, 164, 165, 166, 177, 177, 181, 183, 184,
				193, 196, 197, 199, 200, 205, 207, 208, 209, 212, 212, 215, 218, 218, 220, 220, 220, 220, 220, 224, 225,
				225, 227, 227, 232, 233, 235, 236, 242, 244, 245, 245, 246, 248, 248, 248, 248, 249, 249, 250, 253, 254,
				257, 262, 267, 267, 268, 269, 271, 273, 274, 287, 290, 292, 302, 303, 308, 310, 313, 313, 317, 322, 323,
				324, 324, 325, 328, 330, 331, 332, 333, 333, 336, 341, 342, 343, 344, 344, 345, 346, 346, 351, 352, 353,
				353, 353, 355, 355, 358, 360, 360, 361, 362, 362, 364, 364, 365, 365, 369, 373, 374, 378, 378, 382, 384,
				385, 387, 392, 395, 395, 396, 397, 400, 401, 404, 405, 406, 407, 408, 410, 412, 416, 421, 422, 423, 427,
				427, 428, 429, 433, 435, 443, 443, 446, 448, 449, 450, 452, 456, 456, 458, 462, 463, 466, 466, 466, 468,
				470, 473, 473, 474, 474, 475, 476, 479, 482, 484, 487, 494, 498, 498, 498, 502, 505, 506, 508, 510, 511,
				511, 513, 513, 516, 517, 519, 521, 528, 528, 529, 535, 537, 545, 547, 548, 553, 561, 562, 565, 566, 566,
				569, 570, 571, 573, 578, 583, 585, 587, 588, 589, 595, 595, 596, 598, 599, 600, 602, 603, 604, 609, 614,
				619, 620, 623, 623, 625, 626, 629, 635, 637, 647, 649, 651, 652, 657, 659, 659, 659, 660, 661, 668, 668,
				669, 674, 674, 675, 675, 676, 677, 677, 680, 680, 681, 684, 684, 686, 696, 696, 697, 698, 699, 702, 704,
				705, 707, 709, 711, 713, 714, 717, 717, 723, 725, 727, 728, 731, 732, 733, 734, 738, 743, 745, 745, 746,
				748, 753, 755, 757, 758, 763, 769, 775, 775, 777, 782, 782, 784, 789, 791, 793, 793, 800, 802, 806, 809,
				809, 810, 810, 810, 812, 812, 820, 820, 822, 823, 823, 825, 826, 826, 831, 832, 836, 843, 844, 846, 849,
				850, 851, 852, 852, 855, 856, 859, 860, 862, 864, 866, 867, 875, 881, 881, 882, 885, 887, 887, 889, 893,
				896, 896, 899, 901, 903, 905, 906, 908, 910, 914, 919, 920, 920, 923, 930, 934, 938, 944, 948, 950, 951,
				953, 954, 957, 957, 960, 961, 965, 965, 967, 970, 971, 974, 974, 980, 983, 986, 987, 988, 989, 991, 995,
				995, 995, 997, 1001, 1003, 1003, 1004, 1005, 1005, 1008, 1010, 1015, 1017, 1017, 1018, 1019, 1021, 1023,
				1023, 1025, 1028, 1031, 1034, 1038 };

		System.out.println(kthElement(arr1, arr2, arr1.length, arr2.length, k));

	}

}
